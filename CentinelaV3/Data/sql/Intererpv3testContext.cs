// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CentinelaV3.Data.sql
{
    public partial class Intererpv3testContext : DbContext
    {
        public Intererpv3testContext()
        {
        }

        public Intererpv3testContext(DbContextOptions<Intererpv3testContext> options)
            : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@"Data Source=217.160.15.235;Initial Catalog=InterERPv3Test;User ID=sa;Password=Root.inter2020!;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False");
        }

        public virtual DbSet<Alumno> Alumno { get; set; }
        public virtual DbSet<AlumnoPagos> AlumnoPagos { get; set; }
        public virtual DbSet<BecaAlumno> BecaAlumno { get; set; }
        public virtual DbSet<Becaalubitacora> Becaalubitacora { get; set; }
        public virtual DbSet<Becas> Becas { get; set; }
        public virtual DbSet<Campana> Campana { get; set; }
        public virtual DbSet<Carreras> Carreras { get; set; }
        public virtual DbSet<CatalogoConceptos> CatalogoConceptos { get; set; }
        public virtual DbSet<ConfiguracionPagos> ConfiguracionPagos { get; set; }
        public virtual DbSet<ContactoProspecto> ContactoProspecto { get; set; }
        public virtual DbSet<CuentasPorCobrar> CuentasPorCobrar { get; set; }
        public virtual DbSet<DetalleCuentaPorCobrar> DetalleCuentaPorCobrar { get; set; }
        public virtual DbSet<DetallePago> DetallePago { get; set; }
        public virtual DbSet<DetalleReferencia> DetalleReferencia { get; set; }
        public virtual DbSet<EsquemaPago> EsquemaPago { get; set; }
        public virtual DbSet<EstatusList> EstatusList { get; set; }
        public virtual DbSet<Folio> Folio { get; set; }
        public virtual DbSet<GeneralesAlumno> GeneralesAlumno { get; set; }
        public virtual DbSet<GeneralesProspecto> GeneralesProspecto { get; set; }
        public virtual DbSet<ListaPrecios> ListaPrecios { get; set; }
        public virtual DbSet<Niveles> Niveles { get; set; }
        public virtual DbSet<Referencias> Referencias { get; set; }
        public virtual DbSet<SolicitudPago> SolicitudPago { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<VresolutivoBeca> VresolutivoBeca { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Alumno>(entity =>
            {
                entity.HasKey(e => e.AlId)
                    .HasName("PK__Alumno__7FB33DA0B046CBAF");

                entity.HasIndex(e => e.AlId, "UQ__Alumno__7FB33DA1CA9DD9EA")
                    .IsUnique();

                entity.Property(e => e.AlId).HasColumnName("AL_ID");

                entity.Property(e => e.AlAnoPeriodoActual).HasColumnName("AL_AnoPeriodoActual");

                entity.Property(e => e.AlApm)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AL_APM");

                entity.Property(e => e.AlApp)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AL_APP");

                entity.Property(e => e.AlBecaActual).HasColumnName("AL_BecaActual");

                entity.Property(e => e.AlBecaInscripcion).HasColumnName("AL_Beca_inscripcion");

                entity.Property(e => e.AlBecaParcialidad).HasColumnName("AL_Beca_parcialidad");

                entity.Property(e => e.AlCarrera).HasColumnName("AL_Carrera");

                entity.Property(e => e.AlCicloActual).HasColumnName("AL_CicloActual");

                entity.Property(e => e.AlCorreoInst)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AL_CorreoInst");

                entity.Property(e => e.AlCoutaAdmin).HasColumnName("Al_CoutaAdmin");

                entity.Property(e => e.AlCurp)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("AL_CURP");

                entity.Property(e => e.AlDescPromocion).HasColumnName("AL_Desc_promocion");

                entity.Property(e => e.AlDocumentos).HasColumnName("AL_Documentos");

                entity.Property(e => e.AlEsquemaPagoActual).HasColumnName("AL_EsquemaPagoActual");

                entity.Property(e => e.AlFactura).HasColumnName("AL_Factura");

                entity.Property(e => e.AlFechaIngreso)
                    .HasColumnType("date")
                    .HasColumnName("AL_FechaIngreso");

                entity.Property(e => e.AlFechaInicioNivel)
                    .HasColumnType("date")
                    .HasColumnName("AL_FechaInicioNivel");

                entity.Property(e => e.AlFechaNac)
                    .HasColumnType("date")
                    .HasColumnName("AL_FechaNac");

                entity.Property(e => e.AlMatricula)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("AL_Matricula");

                entity.Property(e => e.AlModalidadActual).HasColumnName("AL_ModalidadActual");

                entity.Property(e => e.AlMontoDesc)
                    .HasColumnType("decimal(17, 2)")
                    .HasColumnName("Al_MontoDesc");

                entity.Property(e => e.AlNombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AL_Nombre");

                entity.Property(e => e.AlPeriodoActual).HasColumnName("AL_PeriodoActual");

                entity.Property(e => e.AlSemestre).HasColumnName("AL_Semestre");

                entity.Property(e => e.AlSexo).HasColumnName("AL_Sexo");

                entity.Property(e => e.AlStatusActual).HasColumnName("AL_StatusActual");

                entity.HasOne(d => d.AlCarreraNavigation)
                    .WithMany(p => p.Alumno)
                    .HasForeignKey(d => d.AlCarrera)
                    .HasConstraintName("FK_Alumno_Carrera");

                entity.HasOne(d => d.AlEsquemaPagoActualNavigation)
                    .WithMany(p => p.Alumno)
                    .HasForeignKey(d => d.AlEsquemaPagoActual)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Alumno__AL_Esque__0A688BB1");

                entity.HasOne(d => d.AlStatusActualNavigation)
                    .WithMany(p => p.Alumno)
                    .HasForeignKey(d => d.AlStatusActual)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Alumno_Estatus");
            });

            modelBuilder.Entity<AlumnoPagos>(entity =>
            {
                entity.HasKey(e => e.ApPagoId)
                    .HasName("PK__AlumnoPa__643B99A242ABABF3");

                entity.Property(e => e.ApPagoId).HasColumnName("AP_PagoID");

                entity.Property(e => e.ApAlumnoClave)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("AP_AlumnoClave");

                entity.Property(e => e.ApAlumnoId).HasColumnName("AP_AlumnoID");

                entity.Property(e => e.ApCuentaBancaria).HasColumnName("Ap_CuentaBancaria");

                entity.Property(e => e.ApEstatus).HasColumnName("AP_Estatus");

                entity.Property(e => e.ApFechaBancaria)
                    .HasColumnType("date")
                    .HasColumnName("AP_FechaBancaria");

                entity.Property(e => e.ApFechaContable)
                    .HasColumnType("date")
                    .HasColumnName("AP_FechaContable");

                entity.Property(e => e.ApFechaCreacion)
                    .HasColumnType("date")
                    .HasColumnName("AP_FechaCreacion");

                entity.Property(e => e.ApFechaRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("AP_FechaRegistro");

                entity.Property(e => e.ApFormaPagoId).HasColumnName("AP_FormaPagoID");

                entity.Property(e => e.ApImportePendiente)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("AP_ImportePendiente");

                entity.Property(e => e.ApImporteTotal)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("AP_ImporteTotal");

                entity.Property(e => e.ApMetodoPago).HasColumnName("AP_MetodoPago");

                entity.Property(e => e.ApMoneda).HasColumnName("AP_Moneda");

                entity.Property(e => e.ApNoAprobacion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AP_NoAprobacion");

                entity.Property(e => e.ApObservaciones)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AP_Observaciones");

                entity.Property(e => e.ApReferencia)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("AP_Referencia");

                entity.Property(e => e.ApReferenciaBancaria)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("AP_ReferenciaBancaria");

                entity.Property(e => e.ApReferenciaId).HasColumnName("AP_ReferenciaID");

                entity.Property(e => e.ApUsuid).HasColumnName("AP_Usuid");

                entity.HasOne(d => d.ApAlumno)
                    .WithMany(p => p.AlumnoPagos)
                    .HasForeignKey(d => d.ApAlumnoId)
                    .HasConstraintName("FK__AlumnoPag__AP_Al__01D345B0");

                entity.HasOne(d => d.ApEstatusNavigation)
                    .WithMany(p => p.AlumnoPagos)
                    .HasForeignKey(d => d.ApEstatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlumnoPagos_EstatusList");

                entity.HasOne(d => d.ApReferenciaNavigation)
                    .WithMany(p => p.AlumnoPagos)
                    .HasForeignKey(d => d.ApReferenciaId)
                    .HasConstraintName("FK_AlumnoPagos_Referencias");
            });

            modelBuilder.Entity<BecaAlumno>(entity =>
            {
                entity.HasKey(e => e.Beid)
                    .HasName("ccbeca_pkey");

                entity.ToTable("becaAlumno");

                entity.Property(e => e.Beid).HasColumnName("beid");

                entity.Property(e => e.AlId).HasColumnName("AL_ID");

                entity.Property(e => e.Beanio).HasColumnName("beanio");

                entity.Property(e => e.BecasId).HasColumnName("Becas_ID");

                entity.Property(e => e.Beconfecha)
                    .HasColumnType("date")
                    .HasColumnName("beconfecha");

                entity.Property(e => e.Beconfirma).HasColumnName("beconfirma");

                entity.Property(e => e.Beestatus).HasColumnName("beestatus");

                entity.Property(e => e.Beinscrip).HasColumnName("beinscrip");

                entity.Property(e => e.Beparcialidades).HasColumnName("beparcialidades");

                entity.Property(e => e.Beperiodo).HasColumnName("beperiodo");

                entity.Property(e => e.Betipo).HasColumnName("betipo");

                entity.Property(e => e.Conceptoid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("conceptoid");

                entity.Property(e => e.Usuid).HasColumnName("usuid");

                entity.HasOne(d => d.Al)
                    .WithMany(p => p.BecaAlumno)
                    .HasForeignKey(d => d.AlId)
                    .HasConstraintName("FK_becaAlumno_Alumno");

                entity.HasOne(d => d.Becas)
                    .WithMany(p => p.BecaAlumno)
                    .HasForeignKey(d => d.BecasId)
                    .HasConstraintName("FK_becaAlumno_becas");

                entity.HasOne(d => d.BeestatusNavigation)
                    .WithMany(p => p.BecaAlumnoBeestatusNavigation)
                    .HasForeignKey(d => d.Beestatus)
                    .HasConstraintName("FK__becaAlumno__EstatusList");

                entity.HasOne(d => d.BetipoNavigation)
                    .WithMany(p => p.BecaAlumnoBetipoNavigation)
                    .HasForeignKey(d => d.Betipo)
                    .HasConstraintName("FK_becatipo_EstatusList");

                entity.HasOne(d => d.Usu)
                    .WithMany(p => p.BecaAlumno)
                    .HasForeignKey(d => d.Usuid)
                    .HasConstraintName("FK_becaAlumno_usuario");
            });

            modelBuilder.Entity<Becaalubitacora>(entity =>
            {
                entity.HasKey(e => e.Ccbbid);

                entity.ToTable("becaalubitacora");

                entity.Property(e => e.Ccbbid).HasColumnName("ccbbid");

                entity.Property(e => e.AlId).HasColumnName("AL_ID");

                entity.Property(e => e.BecasId).HasColumnName("Becas_ID");

                entity.Property(e => e.Beid).HasColumnName("beid");

                entity.Property(e => e.Ccbbanio).HasColumnName("ccbbanio");

                entity.Property(e => e.Ccbbfecha)
                    .HasColumnType("datetime")
                    .HasColumnName("ccbbfecha");

                entity.Property(e => e.Ccbbinscrip).HasColumnName("ccbbinscrip");

                entity.Property(e => e.Ccbbmaquina)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccbbmaquina");

                entity.Property(e => e.Ccbbmovimiento).HasColumnName("ccbbmovimiento");

                entity.Property(e => e.Ccbbparcial).HasColumnName("ccbbparcial");

                entity.Property(e => e.Ccbbperiodo).HasColumnName("ccbbperiodo");

                entity.Property(e => e.DescProm).HasColumnName("desc_prom");

                entity.Property(e => e.Usuid).HasColumnName("usuid");

                entity.HasOne(d => d.Al)
                    .WithMany(p => p.Becaalubitacora)
                    .HasForeignKey(d => d.AlId)
                    .HasConstraintName("FK_becaalubitacora_alumno");

                entity.HasOne(d => d.Becas)
                    .WithMany(p => p.Becaalubitacora)
                    .HasForeignKey(d => d.BecasId)
                    .HasConstraintName("FK_becaalubitacora_becas");

                entity.HasOne(d => d.Be)
                    .WithMany(p => p.Becaalubitacora)
                    .HasForeignKey(d => d.Beid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_becaalubitacora_becaAlumno");

                entity.HasOne(d => d.CcbbmovimientoNavigation)
                    .WithMany(p => p.Becaalubitacora)
                    .HasForeignKey(d => d.Ccbbmovimiento)
                    .HasConstraintName("FK_becaalubitacora_EstatusList");

                entity.HasOne(d => d.Usu)
                    .WithMany(p => p.Becaalubitacora)
                    .HasForeignKey(d => d.Usuid)
                    .HasConstraintName("FK_becaalubitacora_usuario");
            });

            modelBuilder.Entity<Becas>(entity =>
            {
                entity.Property(e => e.BecasId).HasColumnName("Becas_ID");

                entity.Property(e => e.BecasActiva).HasColumnName("Becas_Activa");

                entity.Property(e => e.BecasClave)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Becas_Clave");

                entity.Property(e => e.BecasDescripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Becas_Descripcion");

                entity.Property(e => e.BecasNombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Becas_Nombre");

                entity.Property(e => e.BecasProm).HasColumnName("Becas_prom");

                entity.Property(e => e.BecasResponsable)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Becas_Responsable");

                entity.Property(e => e.CategoriaId).HasColumnName("Categoria_id");

                entity.Property(e => e.ConId).HasColumnName("Con_id");

                entity.Property(e => e.Usuid).HasColumnName("usuid");

                entity.HasOne(d => d.Con)
                    .WithMany(p => p.Becas)
                    .HasForeignKey(d => d.ConId)
                    .HasConstraintName("FK_Becas_Conceptos");
            });

            modelBuilder.Entity<Campana>(entity =>
            {
                entity.HasKey(e => e.Campid)
                    .HasName("PK_campaña");

                entity.ToTable("campana");

                entity.Property(e => e.Campid).HasColumnName("campid");

                entity.Property(e => e.Campanio).HasColumnName("campanio");

                entity.Property(e => e.Campfecfin)
                    .HasColumnType("date")
                    .HasColumnName("campfecfin");

                entity.Property(e => e.Campfecini)
                    .HasColumnType("date")
                    .HasColumnName("campfecini");

                entity.Property(e => e.Campfecreg)
                    .HasColumnType("datetime")
                    .HasColumnName("campfecreg");

                entity.Property(e => e.Campmeta).HasColumnName("campmeta");

                entity.Property(e => e.Campperiodo).HasColumnName("campperiodo");

                entity.Property(e => e.Camppresupuesto)
                    .HasColumnType("decimal(17, 2)")
                    .HasColumnName("camppresupuesto");

                entity.Property(e => e.Usuid).HasColumnName("usuid");

                entity.HasOne(d => d.Usu)
                    .WithMany(p => p.Campana)
                    .HasForeignKey(d => d.Usuid)
                    .HasConstraintName("FK_campaña_usuario");
            });

            modelBuilder.Entity<Carreras>(entity =>
            {
                entity.HasKey(e => e.Idcarrera);

                entity.Property(e => e.Idcarrera)
                    .ValueGeneratedNever()
                    .HasColumnName("IDCarrera");

                entity.Property(e => e.CarreraClave).HasMaxLength(50);

                entity.Property(e => e.CarreraIp).HasMaxLength(50);

                entity.Property(e => e.CarreraNombre).HasMaxLength(100);

                entity.Property(e => e.CarreraRevoe).HasMaxLength(50);

                entity.Property(e => e.FacFacultadId)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("FAC_FacultadID");

                entity.Property(e => e.ModModalidadId).HasColumnName("Mod_ModalidadID");

                entity.Property(e => e.NivelId).HasColumnName("Nivel_ID");

                entity.Property(e => e.PeId).HasColumnName("PE_ID");

                entity.Property(e => e.TempId).HasColumnName("tempId");

                entity.Property(e => e.Usuid).HasColumnName("usuid");

                entity.HasOne(d => d.Nivel)
                    .WithMany(p => p.Carreras)
                    .HasForeignKey(d => d.NivelId)
                    .HasConstraintName("FK_Carreras_Niveles");

                entity.HasOne(d => d.Usu)
                    .WithMany(p => p.Carreras)
                    .HasForeignKey(d => d.Usuid)
                    .HasConstraintName("FK_Carreras_usuario");
            });

            modelBuilder.Entity<CatalogoConceptos>(entity =>
            {
                entity.HasKey(e => e.ConId)
                    .HasName("PK_Conceptos");

                entity.Property(e => e.ConId).HasColumnName("Con_ID");

                entity.Property(e => e.ConClave)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Con_Clave");

                entity.Property(e => e.ConDescripcion)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("Con_Descripcion");

                entity.Property(e => e.ConFechaRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("Con_FechaRegistro");

                entity.Property(e => e.ConRequisitoInscripcion).HasColumnName("Con_RequisitoInscripcion");

                entity.Property(e => e.ConTipoConcepto).HasColumnName("Con_TipoConcepto");

                entity.Property(e => e.ConUsuid).HasColumnName("Con_Usuid");
            });

            modelBuilder.Entity<ConfiguracionPagos>(entity =>
            {
                entity.HasKey(e => e.ConfId);

                entity.Property(e => e.ConfId)
                    .ValueGeneratedNever()
                    .HasColumnName("Conf_ID");

                entity.Property(e => e.ConfAño).HasColumnName("Conf_Año");

                entity.Property(e => e.ConfDiaVencimiento).HasColumnName("Conf_DiaVencimiento");

                entity.Property(e => e.ConfPeriodo).HasColumnName("Conf_Periodo");

                entity.Property(e => e.ConfRecargos).HasColumnName("Conf_Recargos");
            });

            modelBuilder.Entity<ContactoProspecto>(entity =>
            {
                entity.HasKey(e => e.ContId);

                entity.Property(e => e.ApmC)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("apmC");

                entity.Property(e => e.AppC)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("appC");

                entity.Property(e => e.CelC)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("celC");

                entity.Property(e => e.EmailC)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("emailC");

                entity.Property(e => e.FechaR)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaR");

                entity.Property(e => e.GpprospectoId).HasColumnName("GPProspectoId");

                entity.Property(e => e.NombreC)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombreC");

                entity.Property(e => e.TelC)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("telC");

                entity.Property(e => e.TipoC).HasColumnName("tipoC");

                entity.HasOne(d => d.Gpprospecto)
                    .WithMany(p => p.ContactoProspecto)
                    .HasForeignKey(d => d.GpprospectoId)
                    .HasConstraintName("FK_ContactoProspecto");
            });

            modelBuilder.Entity<CuentasPorCobrar>(entity =>
            {
                entity.HasKey(e => e.CpcId);

                entity.Property(e => e.CpcId).HasColumnName("CPC_ID");

                entity.Property(e => e.CpcAlumnoClave)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CPC_AlumnoClave");

                entity.Property(e => e.CpcAlumnoId).HasColumnName("CPC_AlumnoID");

                entity.Property(e => e.CpcAño).HasColumnName("CPC_Año");

                entity.Property(e => e.CpcEstatus).HasColumnName("CPC_Estatus");

                entity.Property(e => e.CpcFechaCreacion)
                    .HasColumnType("date")
                    .HasColumnName("CPC_FechaCreacion");

                entity.Property(e => e.CpcFechaRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("CPC_FechaRegistro");

                entity.Property(e => e.CpcImportePendiente)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CPC_ImportePendiente");

                entity.Property(e => e.CpcImporteTotal)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CPC_ImporteTotal");

                entity.Property(e => e.CpcListaPrecio).HasColumnName("CPC_ListaPrecio");

                entity.Property(e => e.CpcPeriodo).HasColumnName("CPC_Periodo");

                entity.Property(e => e.CpcPrecioUnitario)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CPC_PrecioUnitario");

                entity.Property(e => e.CpcReferenciaCuenta).HasColumnName("CPC_ReferenciaCuenta");

                entity.Property(e => e.CpcUnidad).HasColumnName("CPC_Unidad");

                entity.Property(e => e.CpcUsuid).HasColumnName("CPC_Usuid");

                entity.HasOne(d => d.CpcAlumno)
                    .WithMany(p => p.CuentasPorCobrar)
                    .HasForeignKey(d => d.CpcAlumnoId)
                    .HasConstraintName("FK_CuentasPorCobrar_Alumno");

                entity.HasOne(d => d.CpcEstatusNavigation)
                    .WithMany(p => p.CuentasPorCobrar)
                    .HasForeignKey(d => d.CpcEstatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CuentasPorCobrar_EstatusList");

                entity.HasOne(d => d.CpcListaPrecioNavigation)
                    .WithMany(p => p.CuentasPorCobrar)
                    .HasForeignKey(d => d.CpcListaPrecio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CuentasPorCobrar_ListaPrecio");

                entity.HasOne(d => d.CpcReferenciaCuentaNavigation)
                    .WithMany(p => p.InverseCpcReferenciaCuentaNavigation)
                    .HasForeignKey(d => d.CpcReferenciaCuenta)
                    .HasConstraintName("FK_CuentasPorCobrar_CuentasPorCobrar");
            });

            modelBuilder.Entity<DetalleCuentaPorCobrar>(entity =>
            {
                entity.HasKey(e => e.DcpcId);

                entity.Property(e => e.DcpcId).HasColumnName("DCPC_ID");

                entity.Property(e => e.DcpcCuentaId).HasColumnName("DCPC_CuentaId");

                entity.Property(e => e.DcpcDescripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DCPC_Descripcion");

                entity.Property(e => e.DcpcDocLinea)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("DCPC_DocLinea");

                entity.Property(e => e.DcpcEstatus).HasColumnName("DCPC_Estatus");

                entity.Property(e => e.DcpcFechaCierreCuenta)
                    .HasColumnType("date")
                    .HasColumnName("DCPC_FechaCierreCuenta");

                entity.Property(e => e.DcpcFechaRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DCPC_FechaRegistro");

                entity.Property(e => e.DcpcFechaVencimiento)
                    .HasColumnType("date")
                    .HasColumnName("DCPC_FechaVencimiento");

                entity.Property(e => e.DcpcImportePendiente)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("DCPC_ImportePendiente");

                entity.Property(e => e.DcpcImporteTotal)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("DCPC_ImporteTotal");

                entity.Property(e => e.DcpcReferenciaCuentaDetalle).HasColumnName("DCPC_ReferenciaCuentaDetalle");

                entity.Property(e => e.DcpcUsuid).HasColumnName("DCPC_Usuid");

                entity.HasOne(d => d.DcpcCuenta)
                    .WithMany(p => p.DetalleCuentaPorCobrar)
                    .HasForeignKey(d => d.DcpcCuentaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DetalleCuentaPorCobrar_CuentaPorCobrar");

                entity.HasOne(d => d.DcpcEstatusNavigation)
                    .WithMany(p => p.DetalleCuentaPorCobrar)
                    .HasForeignKey(d => d.DcpcEstatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DetalleCuentaPorCobrar_EstatusList");

                entity.HasOne(d => d.DcpcReferenciaCuentaDetalleNavigation)
                    .WithMany(p => p.InverseDcpcReferenciaCuentaDetalleNavigation)
                    .HasForeignKey(d => d.DcpcReferenciaCuentaDetalle)
                    .HasConstraintName("FK_DetalleCuentaPorCobrar_DetalleCuentaPorCobrar");
            });

            modelBuilder.Entity<DetallePago>(entity =>
            {
                entity.HasKey(e => e.DpId);

                entity.Property(e => e.DpId).HasColumnName("DP_ID");

                entity.Property(e => e.DpCuentaDetalle).HasColumnName("DP_CuentaDetalle");

                entity.Property(e => e.DpDocLinea)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("DP_DocLinea")
                    .IsFixedLength();

                entity.Property(e => e.DpFechaRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DP_FechaRegistro");

                entity.Property(e => e.DpImporteAplicado)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("DP_ImporteAplicado");

                entity.Property(e => e.DpImportePendiente)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("DP_ImportePendiente");

                entity.Property(e => e.DpPagoId).HasColumnName("DP_PagoID");

                entity.Property(e => e.DpSaldoCreado).HasColumnName("DP_SaldoCreado");

                entity.Property(e => e.DpUsuid).HasColumnName("DP_Usuid");

                entity.HasOne(d => d.DpCuentaDetalleNavigation)
                    .WithMany(p => p.DetallePago)
                    .HasForeignKey(d => d.DpCuentaDetalle)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DetallePago_CuentaDetalle");

                entity.HasOne(d => d.DpPago)
                    .WithMany(p => p.DetallePago)
                    .HasForeignKey(d => d.DpPagoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DetallePa__DP_Pa__00DF2177");
            });

            modelBuilder.Entity<DetalleReferencia>(entity =>
            {
                entity.HasKey(e => e.DrId);

                entity.Property(e => e.DrId).HasColumnName("DR_ID");

                entity.Property(e => e.DrCuentaDetalle).HasColumnName("DR_CuentaDetalle");

                entity.Property(e => e.DrFechaRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DR_FechaRegistro");

                entity.Property(e => e.DrMontoAplicado)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("DR_MontoAplicado");

                entity.Property(e => e.DrReferencia).HasColumnName("DR_Referencia");

                entity.Property(e => e.DrUsuid).HasColumnName("DR_Usuid");

                entity.HasOne(d => d.DrCuentaDetalleNavigation)
                    .WithMany(p => p.DetalleReferencia)
                    .HasForeignKey(d => d.DrCuentaDetalle)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DetalleReferencia_DetalleCuenta");

                entity.HasOne(d => d.DrReferenciaNavigation)
                    .WithMany(p => p.DetalleReferencia)
                    .HasForeignKey(d => d.DrReferencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DetalleReferencia_Referencia");
            });

            modelBuilder.Entity<EsquemaPago>(entity =>
            {
                entity.HasKey(e => e.EpId)
                    .HasName("PK__EsquemaP__94F6E55150BF78B9");

                entity.HasIndex(e => e.EpId, "UQ__EsquemaP__94F6E5500331AC2A")
                    .IsUnique();

                entity.Property(e => e.EpId).HasColumnName("EP_ID");

                entity.Property(e => e.EpDescripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EP_Descripcion");

                entity.Property(e => e.EpDiaVencimiento).HasColumnName("EP_DiaVencimiento");

                entity.Property(e => e.EpFechaInicio)
                    .HasColumnType("date")
                    .HasColumnName("EP_FechaInicio");

                entity.Property(e => e.EpFechaRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("EP_FechaRegistro");

                entity.Property(e => e.EpInscripcion).HasColumnName("EP_Inscripcion");

                entity.Property(e => e.EpListaPrecio).HasColumnName("EP_ListaPrecio");

                entity.Property(e => e.EpMontoInscripcion)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("EP_MontoInscripcion");

                entity.Property(e => e.EpMontoMensualidad)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("EP_MontoMensualidad");

                entity.Property(e => e.EpNoInscripciones).HasColumnName("EP_NoInscripciones");

                entity.Property(e => e.EpNoMensualidades).HasColumnName("EP_NoMensualidades");

                entity.Property(e => e.EpUsuid).HasColumnName("EP_Usuid");

                entity.HasOne(d => d.EpListaPrecioNavigation)
                    .WithMany(p => p.EsquemaPago)
                    .HasForeignKey(d => d.EpListaPrecio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EsquemaPago_ListaPrecios");
            });

            modelBuilder.Entity<EstatusList>(entity =>
            {
                entity.HasKey(e => e.SlStatusId)
                    .HasName("PK__EstatusList");

                entity.Property(e => e.SlStatusId).HasColumnName("SL_StatusID");

                entity.Property(e => e.SlDescripcion)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SL_Descripcion");

                entity.Property(e => e.SlModulo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SL_Modulo");

                entity.Property(e => e.SlModuloId).HasColumnName("SL_ModuloID");

                entity.Property(e => e.SlNombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SL_Nombre");
            });

            modelBuilder.Entity<Folio>(entity =>
            {
                entity.Property(e => e.FolioId)
                    .ValueGeneratedNever()
                    .HasColumnName("Folio_id");

                entity.Property(e => e.FolioAlu).HasColumnName("Folio_alu");

                entity.Property(e => e.FolioAluDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Folio_alu_date");

                entity.Property(e => e.FolioAluUsuid).HasColumnName("Folio_alu_usuid");

                entity.Property(e => e.FolioPrs).HasColumnName("Folio_prs");

                entity.Property(e => e.FolioPrsDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Folio_prs_date");

                entity.Property(e => e.FolioPrsUsuid).HasColumnName("Folio_prs_usuid");
            });

            modelBuilder.Entity<GeneralesAlumno>(entity =>
            {
                entity.HasKey(e => e.GaAlumnoId)
                    .HasName("PK__Generale__D988B5F2D7DB48D2");

                entity.Property(e => e.GaAlumnoId)
                    .ValueGeneratedNever()
                    .HasColumnName("GA_AlumnoID");

                entity.Property(e => e.AlId).HasColumnName("AL_ID");

                entity.Property(e => e.GaApmtutor)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GA_APMTutor")
                    .IsFixedLength();

                entity.Property(e => e.GaApptutor)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GA_APPTutor")
                    .IsFixedLength();

                entity.Property(e => e.GaCalle)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GA_Calle")
                    .IsFixedLength();

                entity.Property(e => e.GaCorreoAlternativo)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("GA_CorreoAlternativo")
                    .IsFixedLength();

                entity.Property(e => e.GaEstado).HasColumnName("GA_Estado");

                entity.Property(e => e.GaFechaNac)
                    .HasColumnType("date")
                    .HasColumnName("GA_FechaNac");

                entity.Property(e => e.GaMunicipio).HasColumnName("GA_Municipio");

                entity.Property(e => e.GaNombreTutor)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GA_NombreTutor")
                    .IsFixedLength();

                entity.Property(e => e.GaNueroExt)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("GA_NueroExt")
                    .IsFixedLength();

                entity.Property(e => e.GaNumeroInterior)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GA_NumeroInterior")
                    .IsFixedLength();

                entity.Property(e => e.GaTelefonoAlumno)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GA_TelefonoAlumno")
                    .IsFixedLength();

                entity.Property(e => e.GaTelefonoCasa)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GA_TelefonoCasa")
                    .IsFixedLength();

                entity.Property(e => e.GaTelefonoTutor)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GA_TelefonoTutor")
                    .IsFixedLength();

                entity.HasOne(d => d.Al)
                    .WithMany(p => p.GeneralesAlumno)
                    .HasForeignKey(d => d.AlId)
                    .HasConstraintName("FK_GeneralesAlumno_Alumno");
            });

            modelBuilder.Entity<GeneralesProspecto>(entity =>
            {
                entity.HasKey(e => e.GpProspectoId)
                    .HasName("PK__Generale__72CF6E6085270666");

                entity.HasIndex(e => new { e.GpEstatus, e.Idferia, e.Campid }, "Idx_GP_EstatusFeria");

                entity.Property(e => e.GpProspectoId).HasColumnName("GP_ProspectoID");

                entity.Property(e => e.Campid).HasColumnName("campid");

                entity.Property(e => e.GpApm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GP_APM");

                entity.Property(e => e.GpApp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GP_APP");

                entity.Property(e => e.GpBeca).HasColumnName("GP_Beca");

                entity.Property(e => e.GpBecaInscripcion).HasColumnName("GP_BecaInscripcion");

                entity.Property(e => e.GpBecaOfrecidaPor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GP_BecaOfrecidaPor");

                entity.Property(e => e.GpCorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GP_CorreoElectronico");

                entity.Property(e => e.GpCoutaAdmin).HasColumnName("GP_CoutaAdmin");

                entity.Property(e => e.GpCp).HasColumnName("GP_CP");

                entity.Property(e => e.GpDescPromocion).HasColumnName("GP_DescPromocion");

                entity.Property(e => e.GpDifusion).HasColumnName("GP_Difusion");

                entity.Property(e => e.GpDireccion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("GP_Direccion");

                entity.Property(e => e.GpEdad).HasColumnName("GP_Edad");

                entity.Property(e => e.GpEscuelaPros).HasColumnName("GP_EscuelaPros");

                entity.Property(e => e.GpEstado).HasColumnName("GP_Estado");

                entity.Property(e => e.GpEstatus).HasColumnName("GP_Estatus");

                entity.Property(e => e.GpFechaFirReg)
                    .HasColumnType("datetime")
                    .HasColumnName("GP_FechaFirReg");

                entity.Property(e => e.GpFirmaContra).HasColumnName("GP_FirmaContra");

                entity.Property(e => e.GpImporte).HasColumnName("GP_Importe");

                entity.Property(e => e.GpModPago).HasColumnName("GP_ModPago");

                entity.Property(e => e.GpModalidadInterez).HasColumnName("GP_ModalidadInterez");

                entity.Property(e => e.GpMontoDesc)
                    .HasColumnType("decimal(17, 2)")
                    .HasColumnName("GP_MontoDesc");

                entity.Property(e => e.GpNacionalidad).HasColumnName("GP_Nacionalidad");

                entity.Property(e => e.GpNombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GP_Nombre");

                entity.Property(e => e.GpNumDocExtra)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GP_NumDocExtra");

                entity.Property(e => e.GpObservaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("GP_observaciones");

                entity.Property(e => e.GpPorcentajeBeca).HasColumnName("GP_PorcentajeBeca");

                entity.Property(e => e.GpSemestre).HasColumnName("GP_Semestre");

                entity.Property(e => e.GpTelefono)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GP_Telefono");

                entity.Property(e => e.GpTermyCond).HasColumnName("GP_TermyCond");

                entity.Property(e => e.GpTipDocExtra).HasColumnName("GP_TipDocExtra");

                entity.Property(e => e.GpUsuValBeca).HasColumnName("GP_UsuValBeca");

                entity.Property(e => e.GpValBecaFecha)
                    .HasColumnType("date")
                    .HasColumnName("GP_ValBecaFecha");

                entity.Property(e => e.Gpmatricula)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GPMatricula");

                entity.Property(e => e.Gppfecha)
                    .HasColumnType("datetime")
                    .HasColumnName("GPPFecha");

                entity.Property(e => e.GpporsMat)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GPPorsMat");

                entity.Property(e => e.Idcarrera).HasColumnName("IDCarrera");

                entity.Property(e => e.Idferia).HasColumnName("idferia");

                entity.Property(e => e.Usuid).HasColumnName("usuid");

                entity.HasOne(d => d.Camp)
                    .WithMany(p => p.GeneralesProspecto)
                    .HasForeignKey(d => d.Campid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("campanaRestriccion");

                entity.HasOne(d => d.GpEstatusNavigation)
                    .WithMany(p => p.GeneralesProspecto)
                    .HasForeignKey(d => d.GpEstatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GeneralesProspecto_Estatus");

                entity.HasOne(d => d.IdcarreraNavigation)
                    .WithMany(p => p.GeneralesProspecto)
                    .HasForeignKey(d => d.Idcarrera)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GeneralesProspecto_IDCarrera");

                entity.HasOne(d => d.Usu)
                    .WithMany(p => p.GeneralesProspecto)
                    .HasForeignKey(d => d.Usuid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GeneralesProspecto_Usuario");
            });

            modelBuilder.Entity<ListaPrecios>(entity =>
            {
                entity.HasKey(e => e.LpId)
                    .HasName("PK__ListaPre__14A20AC92A2AFC96");

                entity.Property(e => e.LpId).HasColumnName("LP_ID");

                entity.Property(e => e.LpCarrera).HasColumnName("LP_Carrera");

                entity.Property(e => e.LpConcepto).HasColumnName("LP_Concepto");

                entity.Property(e => e.LpDescripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LP_Descripcion");

                entity.Property(e => e.LpFechaFin)
                    .HasColumnType("date")
                    .HasColumnName("LP_FechaFin");

                entity.Property(e => e.LpFechaInicio)
                    .HasColumnType("date")
                    .HasColumnName("LP_FechaInicio");

                entity.Property(e => e.LpFechaRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("LP_FechaRegistro");

                entity.Property(e => e.LpGeneracion).HasColumnName("LP_Generacion");

                entity.Property(e => e.LpMonto)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("LP_Monto");

                entity.Property(e => e.LpNivel).HasColumnName("LP_Nivel");

                entity.Property(e => e.LpParcialidades).HasColumnName("LP_Parcialidades");

                entity.Property(e => e.LpUsuid).HasColumnName("LP_Usuid");

                entity.HasOne(d => d.LpCarreraNavigation)
                    .WithMany(p => p.ListaPrecios)
                    .HasForeignKey(d => d.LpCarrera)
                    .HasConstraintName("FK_ListaPrecios_Carrera");

                entity.HasOne(d => d.LpConceptoNavigation)
                    .WithMany(p => p.ListaPrecios)
                    .HasForeignKey(d => d.LpConcepto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ListaPrecios_Concepto");

                entity.HasOne(d => d.LpNivelNavigation)
                    .WithMany(p => p.ListaPrecios)
                    .HasForeignKey(d => d.LpNivel)
                    .HasConstraintName("FK_ListaPrecios_Nivel");
            });

            modelBuilder.Entity<Niveles>(entity =>
            {
                entity.HasKey(e => e.NivelId)
                    .HasName("PK__Niveles__CF8BC6D04FFE64A4");

                entity.Property(e => e.NivelId).HasColumnName("Nivel_ID");

                entity.Property(e => e.NivelDescripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Nivel_Descripcion")
                    .IsFixedLength();

                entity.Property(e => e.NivelNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Nivel_Nombre")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Referencias>(entity =>
            {
                entity.HasKey(e => e.RReferenciaId)
                    .HasName("PK__Referenc__FCFD776577C0E0F8");

                entity.Property(e => e.RReferenciaId).HasColumnName("R_ReferenciaID");

                entity.Property(e => e.RAlumnoClave)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("R_AlumnoClave");

                entity.Property(e => e.RAlumnoId).HasColumnName("R_AlumnoID");

                entity.Property(e => e.RFechaCreacion)
                    .HasColumnType("date")
                    .HasColumnName("R_FechaCreacion");

                entity.Property(e => e.RFechaInicio)
                    .HasColumnType("date")
                    .HasColumnName("R_FechaInicio");

                entity.Property(e => e.RFechaRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("R_FechaRegistro");

                entity.Property(e => e.RFechaVigencia)
                    .HasColumnType("date")
                    .HasColumnName("R_FechaVigencia");

                entity.Property(e => e.RReferencia)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("R_Referencia");

                entity.Property(e => e.RReferenciaStatus).HasColumnName("R_ReferenciaStatus");

                entity.Property(e => e.RTotalReferencia)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("R_TotalReferencia");

                entity.Property(e => e.RUsuid).HasColumnName("R_Usuid");

                entity.HasOne(d => d.RAlumno)
                    .WithMany(p => p.Referencias)
                    .HasForeignKey(d => d.RAlumnoId)
                    .HasConstraintName("FK_Referencias_Alumno");

                entity.HasOne(d => d.RReferenciaStatusNavigation)
                    .WithMany(p => p.Referencias)
                    .HasForeignKey(d => d.RReferenciaStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Referencias_EstatusList");
            });

            modelBuilder.Entity<SolicitudPago>(entity =>
            {
                entity.HasKey(e => e.SolicitudId)
                    .HasName("PK__Solicitu__1B36B2FCEA2BC932");

                entity.Property(e => e.SolicitudId).HasColumnName("solicitudId");

                entity.Property(e => e.Alumno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("alumno");

                entity.Property(e => e.CodBarras)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionE)
                    .IsRequired()
                    .HasMaxLength(2255)
                    .IsUnicode(false);

                entity.Property(e => e.EfecCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("efecCode");

                entity.Property(e => e.EfecError)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("efecError");

                entity.Property(e => e.EfecOperationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("efecOperationDate");

                entity.Property(e => e.EfecOrder)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("efecOrder");

                entity.Property(e => e.EfecPendingReason)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("efecPendingReason");

                entity.Property(e => e.EfecResponseCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("efecResponseCode");

                entity.Property(e => e.EfecState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("efecState");

                entity.Property(e => e.EfecTransaccion)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("efecTransaccion");

                entity.Property(e => e.EfectivoAccountNivel).HasColumnName("efectivoAccountNivel");

                entity.Property(e => e.EfectivoEmailBuyer)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("efectivoEmailBuyer");

                entity.Property(e => e.EfectivoMetodoPago).HasColumnName("efectivoMetodoPago");

                entity.Property(e => e.EfectivoMonto)
                    .HasColumnType("decimal(13, 2)")
                    .HasColumnName("efectivoMonto");

                entity.Property(e => e.EfectivoRespuesta)
                    .HasMaxLength(2255)
                    .IsUnicode(false)
                    .HasColumnName("efectivoRespuesta");

                entity.Property(e => e.EfectivoSignature)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("efectivoSignature");

                entity.Property(e => e.EfectrazabilityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("efectrazabilityCode");

                entity.Property(e => e.ErrorRedPago)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEstatus)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaEstatus");

                entity.Property(e => e.FechaExpiro).HasColumnType("datetime");

                entity.Property(e => e.RReferenciaId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("R_ReferenciaID");

                entity.Property(e => e.RefPayu)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.HasKey(e => e.Usuid)
                    .HasName("PK_Tusuario");

                entity.ToTable("usuario");

                entity.Property(e => e.Usuid).HasColumnName("usuid");

                entity.Property(e => e.Rolid).HasColumnName("ROLId");

                entity.Property(e => e.Usuactivo).HasColumnName("USUactivo");

                entity.Property(e => e.Usuequipo)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USUEquipo");

                entity.Property(e => e.Usuidtipo).HasColumnName("USUidtipo");

                entity.Property(e => e.Usuimage)
                    .HasColumnType("image")
                    .HasColumnName("USUImage");

                entity.Property(e => e.Usuip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USUIp");

                entity.Property(e => e.Usukey)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USUKey");

                entity.Property(e => e.UsulastChange)
                    .HasColumnType("datetime")
                    .HasColumnName("USULastChange");

                entity.Property(e => e.UsumoodleL).HasColumnName("USUMoodleL");

                entity.Property(e => e.UsumoodleM).HasColumnName("USUMoodleM");

                entity.Property(e => e.UsumoodleP).HasColumnName("USUMoodleP");

                entity.Property(e => e.Usumovil)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("USUMovil");

                entity.Property(e => e.Usupassword)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("USUpassword");

                entity.Property(e => e.Usupid)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("USUPid");

                entity.Property(e => e.Ususession)
                    .HasColumnType("datetime")
                    .HasColumnName("USUsession");

                entity.Property(e => e.Usutipo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("USUtipo")
                    .IsFixedLength();

                entity.Property(e => e.Usuusuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USUusuario")
                    .IsFixedLength();
            });

            modelBuilder.Entity<VresolutivoBeca>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VResolutivoBeca");

                entity.Property(e => e.AlApm)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AL_APM");

                entity.Property(e => e.AlApp)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AL_APP");

                entity.Property(e => e.AlId).HasColumnName("AL_ID");

                entity.Property(e => e.AlMatricula)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("AL_Matricula");

                entity.Property(e => e.AlNombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AL_Nombre");

                entity.Property(e => e.Beanio).HasColumnName("beanio");

                entity.Property(e => e.BecasClave)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Becas_Clave");

                entity.Property(e => e.BecasId).HasColumnName("Becas_ID");

                entity.Property(e => e.BecasNombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Becas_Nombre");

                entity.Property(e => e.Beestatus).HasColumnName("beestatus");

                entity.Property(e => e.Beid).HasColumnName("beid");

                entity.Property(e => e.Beinscrip).HasColumnName("beinscrip");

                entity.Property(e => e.Beparcialidades).HasColumnName("beparcialidades");

                entity.Property(e => e.Beperiodo).HasColumnName("beperiodo");

                entity.Property(e => e.CarreraClave).HasMaxLength(50);

                entity.Property(e => e.CarreraNombre).HasMaxLength(100);

                entity.Property(e => e.NivelDescripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Nivel_Descripcion")
                    .IsFixedLength();

                entity.Property(e => e.NivelNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Nivel_Nombre")
                    .IsFixedLength();

                entity.Property(e => e.PeriodosId).HasColumnName("Periodos_ID");

                entity.Property(e => e.PeriodosNombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Periodos_Nombre")
                    .IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}